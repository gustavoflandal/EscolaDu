generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String               @id @default(uuid())
  email                 String               @unique
  password              String
  name                  String
  cpf                   String?              @unique
  phone                 String?
  avatar                String?
  active                Boolean              @default(true)
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  alunoAsResponsavel    Aluno[]              @relation("ResponsavelPrincipal")
  auditLogs             AuditLog[]
  avaliacoesRealizadas  AvaliacaoObjetivo[]
  comunicadosPublicados Comunicado[]
  planosRecuperacao     PlanoRecuperacao[]
  professor             Professor?
  registrosFrequencia   RegistroFrequencia[]
  responsavel           Responsavel?
  roles                 UserRole[]

  @@index([email])
  @@index([active])
  @@map("users")
}

model Role {
  id          String           @id @default(uuid())
  name        String           @unique
  description String?
  active      Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  permissions RolePermission[]
  users       UserRole[]

  @@map("roles")
}

model Permission {
  id          String           @id @default(uuid())
  resource    String
  action      String
  description String?
  createdAt   DateTime         @default(now())
  roles       RolePermission[]

  @@unique([resource, action])
  @@map("permissions")
}

model UserRole {
  userId    String
  roleId    String
  createdAt DateTime @default(now())
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@index([roleId], map: "user_roles_roleId_fkey")
  @@map("user_roles")
}

model RolePermission {
  roleId       String
  permissionId String
  createdAt    DateTime   @default(now())
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
  @@index([permissionId], map: "role_permissions_permissionId_fkey")
  @@map("role_permissions")
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String?
  action    String
  entity    String
  entityId  String?
  oldValue  Json?
  newValue  Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([entity, entityId])
  @@index([createdAt])
  @@map("audit_logs")
}

model Aluno {
  id                     String                    @id @default(uuid())
  matricula              String                    @unique
  nome                   String
  cpf                    String?                   @unique
  rg                     String?
  dataNascimento         DateTime
  genero                 String?
  foto                   String?
  endereco               String?
  telefone               String?
  email                  String?
  necessidadesEspeciais  String?
  restricoesMedicas      String?
  status                 String                    @default("ATIVO")
  active                 Boolean                   @default(true)
  createdAt              DateTime                  @default(now())
  updatedAt              DateTime                  @updatedAt
  anonimizado            Boolean                   @default(false)
  dataAnonimizacao       DateTime?
  responsavelPrincipalId String?
  responsavelPrincipal   User?                     @relation("ResponsavelPrincipal", fields: [responsavelPrincipalId], references: [id])
  avaliacoes             AvaliacaoObjetivo[]
  comunicadosLeitura     ComunicadoLeitura[]
  evidencias             EvidenciaAprendizagem[]
  matriculas             Matricula[]
  notificacoes           Notificacao[]
  planosRecuperacao      PlanoRecuperacao[]
  frequencias            RegistroFrequencia[]
  responsaveis           VinculoResponsabilidade[]

  @@index([matricula])
  @@index([status])
  @@index([active])
  @@index([responsavelPrincipalId], map: "alunos_responsavelPrincipalId_fkey")
  @@fulltext([nome])
  @@map("alunos")
}

model Responsavel {
  id                 String                    @id @default(uuid())
  userId             String                    @unique
  cpf                String                    @unique
  rg                 String?
  tipoVinculo        String                    // PAI, MAE, AVO, TUTOR, OUTRO
  telefonePrincipal  String
  telefoneSecundario String?
  email              String
  profissao          String?
  endereco           String?
  createdAt          DateTime                  @default(now())
  updatedAt          DateTime                  @updatedAt
  user               User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  vinculos           VinculoResponsabilidade[]

  @@map("responsaveis")
}

model VinculoResponsabilidade {
  id                String      @id @default(uuid())
  alunoId           String
  responsavelId     String
  prioridadeContato Int         @default(1)
  active            Boolean     @default(true)
  createdAt         DateTime    @default(now())
  aluno             Aluno       @relation(fields: [alunoId], references: [id], onDelete: Cascade)
  responsavel       Responsavel @relation(fields: [responsavelId], references: [id], onDelete: Cascade)

  @@unique([alunoId, responsavelId])
  @@index([responsavelId], map: "vinculo_responsabilidade_responsavelId_fkey")
  @@map("vinculo_responsabilidade")
}

model Professor {
  id                   String            @id @default(uuid())
  userId               String            @unique
  registroProfissional String?
  especialidade        String?
  cargaHoraria         Int?
  active               Boolean           @default(true)
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  user                 User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  disciplinas          TurmaDisciplina[]
  turmasRegente        Turma[]           @relation("ProfessorRegente")
  formacoes            Formacao[]

  @@map("professores")
}

model Formacao {
  id              String    @id @default(uuid())
  professorId     String
  nivel           String    // FUNDAMENTAL, MEDIO, TECNICO, GRADUACAO, POS_GRADUACAO, MESTRADO, DOUTORADO
  curso           String
  instituicao     String
  areaConhecimento String?
  dataInicio      DateTime
  dataConclusao   DateTime?
  emAndamento     Boolean   @default(false)
  cargaHoraria    Int?
  observacoes     String?   @db.Text
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  professor       Professor @relation(fields: [professorId], references: [id], onDelete: Cascade)

  @@index([professorId])
  @@map("formacoes")
}

model AnoLetivo {
  id         String          @id @default(uuid())
  ano        Int             @unique
  dataInicio DateTime
  dataFim    DateTime
  divisao    String          @default("TRIMESTRE")
  status     String          @default("PLANEJAMENTO")
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  periodos   PeriodoLetivo[]
  turmas     Turma[]

  @@map("ano_letivo")
}

model PeriodoLetivo {
  id          String    @id @default(uuid())
  anoLetivoId String
  numero      Int
  nome        String
  dataInicio  DateTime
  dataFim     DateTime
  createdAt   DateTime  @default(now())
  anoLetivo   AnoLetivo @relation(fields: [anoLetivoId], references: [id], onDelete: Cascade)

  @@unique([anoLetivoId, numero])
  @@map("periodo_letivo")
}

model Turma {
  id                 String              @id @default(uuid())
  codigo             String              @unique
  nome               String
  anoLetivoId        String
  serie              String
  turno              String
  capacidadeMaxima   Int                 @default(30)
  sala               String?
  professorRegenteId String?
  active             Boolean             @default(true)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  aulas              Aula[]
  avaliacoes         AvaliacaoObjetivo[]
  comunicados        Comunicado[]
  matriculas         Matricula[]
  disciplinas        TurmaDisciplina[]
  anoLetivo          AnoLetivo           @relation(fields: [anoLetivoId], references: [id])
  professorRegente   Professor?          @relation("ProfessorRegente", fields: [professorRegenteId], references: [id])

  @@index([codigo])
  @@index([anoLetivoId])
  @@index([professorRegenteId], map: "turmas_professorRegenteId_fkey")
  @@map("turmas")
}

model Matricula {
  id            String    @id @default(uuid())
  alunoId       String
  turmaId       String
  dataMatricula DateTime  @default(now())
  dataSaida     DateTime?
  status        String    @default("ATIVO")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  aluno         Aluno     @relation(fields: [alunoId], references: [id], onDelete: Cascade)
  turma         Turma     @relation(fields: [turmaId], references: [id], onDelete: Cascade)

  @@unique([alunoId, turmaId])
  @@index([alunoId])
  @@index([turmaId])
  @@map("matriculas")
}

model Disciplina {
  id                  String                 @id @default(uuid())
  codigo              String                 @unique
  nome                String
  areaConhecimento    String?
  cargaHorariaSemanal Int                    @default(4)
  descricao           String?
  active              Boolean                @default(true)
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  objetivos           ObjetivoAprendizagem[]
  turmas              TurmaDisciplina[]

  @@map("disciplinas")
}

model TurmaDisciplina {
  id            String     @id @default(uuid())
  turmaId       String
  disciplinaId  String
  professorId   String
  diaSemana     Int?
  horarioInicio String?
  horarioFim    String?
  createdAt     DateTime   @default(now())
  aulas         Aula[]
  disciplina    Disciplina @relation(fields: [disciplinaId], references: [id], onDelete: Cascade)
  professor     Professor  @relation(fields: [professorId], references: [id], onDelete: Cascade)
  turma         Turma      @relation(fields: [turmaId], references: [id], onDelete: Cascade)

  @@unique([turmaId, disciplinaId])
  @@index([disciplinaId], map: "turma_disciplina_disciplinaId_fkey")
  @@index([professorId], map: "turma_disciplina_professorId_fkey")
  @@map("turma_disciplina")
}

model Aula {
  id                String               @id @default(uuid())
  turmaDisciplinaId String
  turmaId           String
  data              DateTime
  horaInicio        String
  horaFim           String
  conteudo          String?
  professorId       String?
  status            String               @default("REALIZADA")
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  turmaDisciplina   TurmaDisciplina      @relation(fields: [turmaDisciplinaId], references: [id], onDelete: Cascade)
  turma             Turma                @relation(fields: [turmaId], references: [id], onDelete: Cascade)
  frequencias       RegistroFrequencia[]

  @@index([turmaDisciplinaId])
  @@index([data])
  @@index([turmaId], map: "aulas_turmaId_fkey")
  @@map("aulas")
}

model RegistroFrequencia {
  id              String              @id @default(uuid())
  aulaId          String
  alunoId         String
  status          String
  observacao      String?
  justificativaId String?
  registradoPor   String?
  registradoEm    DateTime            @default(now())
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  aluno           Aluno               @relation(fields: [alunoId], references: [id], onDelete: Cascade)
  aula            Aula                @relation(fields: [aulaId], references: [id], onDelete: Cascade)
  justificativa   JustificativaFalta? @relation(fields: [justificativaId], references: [id])
  registrador     User?               @relation(fields: [registradoPor], references: [id])

  @@unique([aulaId, alunoId])
  @@index([alunoId])
  @@index([status])
  @@index([justificativaId], map: "registro_frequencia_justificativaId_fkey")
  @@index([registradoPor], map: "registro_frequencia_registradoPor_fkey")
  @@map("registro_frequencia")
}

model JustificativaFalta {
  id           String               @id @default(uuid())
  alunoId      String
  dataInicio   DateTime
  dataFim      DateTime
  motivo       String
  documentoUrl String?
  aprovada     Boolean              @default(false)
  aprovadaPor  String?
  aprovadaEm   DateTime?
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  registros    RegistroFrequencia[]

  @@index([alunoId])
  @@map("justificativa_falta")
}

model ObjetivoAprendizagem {
  id           String              @id @default(uuid())
  codigoBNCC   String              @unique
  descricao    String              @db.Text
  disciplinaId String
  serie        String
  periodo      String
  competencia  String?             @db.Text
  habilidade   String?             @db.Text
  active       Boolean             @default(true)
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  avaliacoes   AvaliacaoObjetivo[]
  disciplina   Disciplina          @relation(fields: [disciplinaId], references: [id], onDelete: Cascade)

  @@index([codigoBNCC])
  @@index([serie])
  @@index([disciplinaId], map: "objetivo_aprendizagem_disciplinaId_fkey")
  @@map("objetivo_aprendizagem")
}

model AvaliacaoObjetivo {
  id          String                  @id @default(uuid())
  objetivoId  String
  alunoId     String
  turmaId     String
  status      String
  observacao  String?                 @db.Text
  avaliadoPor String?
  avaliadoEm  DateTime                @default(now())
  revisado    Boolean                 @default(false)
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt
  aluno       Aluno                   @relation(fields: [alunoId], references: [id], onDelete: Cascade)
  avaliador   User?                   @relation(fields: [avaliadoPor], references: [id])
  objetivo    ObjetivoAprendizagem    @relation(fields: [objetivoId], references: [id], onDelete: Cascade)
  turma       Turma                   @relation(fields: [turmaId], references: [id], onDelete: Cascade)
  evidencias  EvidenciaAprendizagem[]

  @@unique([objetivoId, alunoId, turmaId])
  @@index([alunoId])
  @@index([status])
  @@index([avaliadoPor], map: "avaliacao_objetivo_avaliadoPor_fkey")
  @@index([turmaId], map: "avaliacao_objetivo_turmaId_fkey")
  @@map("avaliacao_objetivo")
}

model EvidenciaAprendizagem {
  id                  String            @id @default(uuid())
  avaliacaoObjetivoId String
  alunoId             String
  tipo                String
  arquivoUrl          String?
  descricao           String?           @db.Text
  createdAt           DateTime          @default(now())
  aluno               Aluno             @relation(fields: [alunoId], references: [id], onDelete: Cascade)
  avaliacao           AvaliacaoObjetivo @relation(fields: [avaliacaoObjetivoId], references: [id], onDelete: Cascade)

  @@index([avaliacaoObjetivoId])
  @@index([alunoId], map: "evidencia_aprendizagem_alunoId_fkey")
  @@map("evidencia_aprendizagem")
}

model PlanoRecuperacao {
  id              String                      @id @default(uuid())
  alunoId         String
  tipo            String
  dataInicio      DateTime
  dataFim         DateTime
  diagnostico     String                      @db.Text
  objetivos       String                      @db.Text
  acoesPrevistas  String                      @db.Text
  responsavelId   String
  status          String                      @default("EM_ANDAMENTO")
  resultado       String?                     @db.Text
  createdAt       DateTime                    @default(now())
  updatedAt       DateTime                    @updatedAt
  aluno           Aluno                       @relation(fields: [alunoId], references: [id], onDelete: Cascade)
  responsavel     User                        @relation(fields: [responsavelId], references: [id], onDelete: Cascade)
  acompanhamentos RecuperacaoAcompanhamento[]

  @@index([alunoId])
  @@index([status])
  @@index([responsavelId], map: "plano_recuperacao_responsavelId_fkey")
  @@map("plano_recuperacao")
}

model RecuperacaoAcompanhamento {
  id            String           @id @default(uuid())
  planoId       String
  data          DateTime
  observacao    String           @db.Text
  progresso     String
  registradoPor String
  registradoEm  DateTime         @default(now())
  plano         PlanoRecuperacao @relation(fields: [planoId], references: [id], onDelete: Cascade)

  @@index([planoId])
  @@map("recuperacao_acompanhamento")
}

model Comunicado {
  id                String              @id @default(uuid())
  tipo              String
  titulo            String
  conteudo          String              @db.Text
  destinatarioTipo  String
  destinatarioId    String?
  turmaId           String?
  arquivoUrl        String?
  requerConfirmacao Boolean             @default(false)
  publicadoPor      String
  publicadoEm       DateTime            @default(now())
  expiraEm          DateTime?
  createdAt         DateTime            @default(now())
  leituras          ComunicadoLeitura[]
  publicador        User                @relation(fields: [publicadoPor], references: [id], onDelete: Cascade)
  turma             Turma?              @relation(fields: [turmaId], references: [id])

  @@index([tipo])
  @@index([publicadoEm])
  @@index([publicadoPor], map: "comunicados_publicadoPor_fkey")
  @@index([turmaId], map: "comunicados_turmaId_fkey")
  @@map("comunicados")
}

model ComunicadoLeitura {
  comunicadoId String
  alunoId      String
  lidoEm       DateTime   @default(now())
  aluno        Aluno      @relation(fields: [alunoId], references: [id], onDelete: Cascade)
  comunicado   Comunicado @relation(fields: [comunicadoId], references: [id], onDelete: Cascade)

  @@id([comunicadoId, alunoId])
  @@index([alunoId], map: "comunicado_leitura_alunoId_fkey")
  @@map("comunicado_leitura")
}

model Notificacao {
  id             String    @id @default(uuid())
  destinatarioId String?
  alunoId        String?
  tipo           String
  titulo         String
  mensagem       String    @db.Text
  lida           Boolean   @default(false)
  enviadaPor     String?
  criadaEm       DateTime  @default(now())
  lidaEm         DateTime?
  aluno          Aluno?    @relation(fields: [alunoId], references: [id], onDelete: Cascade)

  @@index([alunoId])
  @@index([lida])
  @@index([criadaEm])
  @@map("notificacoes")
}

model ConfiguracaoEscola {
  id           String   @id @default(uuid())
  chave        String   @unique
  valor        String   @db.Text
  tipo         String   @default("STRING")
  descricao    String?  @db.Text
  editavel     Boolean  @default(true)
  atualizadoEm DateTime @default(now()) @updatedAt

  @@map("configuracao_escola")
}

model TermoConsentimento {
  id                String    @id @default(uuid())
  usuarioId         String
  tipoTermo         String
  versao            String
  consentiu         Boolean
  dataConsentimento DateTime  @default(now())
  ipAddress         String?
  revogado          Boolean   @default(false)
  dataRevogacao     DateTime?

  @@index([usuarioId])
  @@map("termo_consentimento")
}
